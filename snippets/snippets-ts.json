{
  "Import Hooks": {
    "prefix": "imh",
    "body": [
      "import { $1 } from 'react';\n"
    ],
    "description": "Import React Hooks"
  },
  "Import ReactDOM": {
    "prefix": "imrd",
    "body": [
      "import ReactDOM from 'react-dom';"
    ],
    "description": "Import ReactDOM"
  },
  "Function Component": {
    "prefix": "fc",
    "body": [
      "interface ${1:ComponentName}Props {",
      "\t$2",
      "}",
      "",
      "const ${1:ComponentName} = (props: ${1:ComponentName}Props) => {",
      "\t$3",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Function Component with TypeScript"
  },
  "Function Component with useState": {
    "prefix": "fcu",
    "body": [
      "import { useState } from 'react';",
      "",
      "interface ${1:ComponentName}Props {",
      "\t$2",
      "}",
      "",
      "const ${1:ComponentName} = (props: ${1:ComponentName}Props) => {",
      "\tconst [${3:state}, set${3/(.*)/${1:/capitalize}/}] = useState(${4:initialValue});",
      "\t$5",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Function Component with useState Hook"
  },
  "useEffect Hook": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "\t$0",
      "}, [${1:dependencies}]);"
    ],
    "description": "useEffect Hook"
  },
  "useCallback Hook": {
    "prefix": "ucb",
    "body": [
      "const ${1:callback} = useCallback(() => {",
      "\t$0",
      "}, [${2:dependencies}]);"
    ],
    "description": "useCallback Hook"
  },
  "useState Hook": {
    "prefix": "usf",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:type}>(${3:initialValue});"
    ],
    "description": "Declare a new state variable using useState Hook"
  },
  "useRef Hook": {
    "prefix": "urf",
    "body": [
      "const ${1:ref} = useRef<${2:Type}>(${3:initialValue});"
    ],
    "description": "Declare a new ref variable using useRef Hook"
  },
  "Custom Hook": {
    "prefix": "hook",
    "body": [
      "const use${1:HookName} = (${2:params}) => {",
      "\t$0",
      "\treturn ${3:value};",
      "};",
      "",
      "export default use${1:HookName};"
    ],
    "description": "Custom Hook"
  },
  "Context Provider": {
    "prefix": "cp",
    "body": [
      "import { createContext, useState } from 'react';",
      "",
      "interface ${1:ContextName}Type {",
      "\t$2",
      "}",
      "",
      "export const ${1:ContextName} = createContext<${1:ContextName}Type | undefined>(undefined);",
      "",
      "interface ${1:ContextName}ProviderProps {",
      "\tchildren: React.ReactNode;",
      "}",
      "",
      "export const ${1:ContextName}Provider = ({ children }: ${1:ContextName}ProviderProps) => {",
      "\tconst [${3:state}, set${3/(.*)/${1:/capitalize}/}] = useState<${1:ContextName}Type>($4);",
      "\t$5",
      "\treturn (",
      "\t\t<${1:ContextName}.Provider value={{ ${3:state}, set${3/(.*)/${1:/capitalize}/} }}>",
      "\t\t\t{children}",
      "\t\t</${1:ContextName}.Provider>",
      "\t);",
      "};"
    ],
    "description": "Context Provider with TypeScript and useState"
  },
  "Function Component with React.memo": {
    "prefix": "fcm",
    "body": [
      "interface ${1:ComponentName}Props {",
      "\t$2",
      "}",
      "",
      "const ${1:ComponentName} = (props: ${1:ComponentName}Props) => {",
      "\t$3",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "};",
      "",
      "export default React.memo(${1:ComponentName});"
    ],
    "description": "Function Component wrapped with React.memo"
  },
  "useReducer Hook": {
    "prefix": "urd",
    "body": [
      "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialState});"
    ],
    "description": "useReducer Hook"
  },
  "useContext Hook": {
    "prefix": "uct",
    "body": [
      "const ${1:context} = useContext(${2:Context});"
    ],
    "description": "useContext Hook"
  },
  "useMemo Hook": {
    "prefix": "ume",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => ${2:computeValue}, [${3:dependencies}]);"
    ],
    "description": "useMemo Hook"
  },
  "useLayoutEffect Hook": {
    "prefix": "ule",
    "body": [
      "useLayoutEffect(() => {",
      "\t$0",
      "}, [${1:dependencies}]);"
    ],
    "description": "useLayoutEffect Hook"
  }
}